---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  revisionHistoryLimit: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: quay.io/minio/minio:latest@sha256:178e05aba3a0dc967df3558aab43097f1427bbcda77264fc24e92f1bf09dfe02
          command:
            - minio
            - server
            - /data
            - --console-address
            - :9001
          ports:
            - containerPort: 9000
              protocol: TCP
            - containerPort: 9001
              protocol: TCP
          volumeMounts:
            - name: minio
              mountPath: /data
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: story-manager-secrets
                  key: S3_ACCESSTOKEN
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: story-manager-secrets
                  key: S3_SECRETTOKEN
      volumes:
        - name: minio
          persistentVolumeClaim:
            claimName: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    service: api
spec:
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio-dashboard
  labels:
    service: api
spec:
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
  selector:
    app: minio
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-dashboard
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:8080"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_clear_headers "Content-Security-Policy";
spec:
  tls:
    - hosts:
        - dash.obj.buttert.art
      secretName: dash-obj-buttertart-tls
  rules:
    - host: dash.obj.buttert.art
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: minio-dashboard
                port:
                  number: 9001
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dash-obj-buttertart-tls
spec:
  secretName: dash-obj-buttertart-tls
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
  commonName: dash.obj.buttert.art
  dnsNames:
    - dash.obj.buttert.art
  privateKey:
    rotationPolicy: Always
    algorithm: ECDSA
    size: 384
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio
  annotations:
    external-dns.alpha.kubernetes.io/target: buttert.art
    kubernetes.io/ingress.class: nginx
spec:
  tls:
    - hosts:
        - obj.buttert.art
      secretName: obj-buttertart-tls
  rules:
    - host: obj.buttert.art
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: minio
                port:
                  number: 9000
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: obj-buttertart-tls
spec:
  secretName: obj-buttertart-tls
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
  commonName: obj.buttert.art
  dnsNames:
    - obj.buttert.art
  privateKey:
    rotationPolicy: Always
    algorithm: ECDSA
    size: 384